(function(){const u=document.createElement("link").relList;if(u&&u.supports&&u.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))g(t);new MutationObserver(t=>{for(const i of t)if(i.type==="childList")for(const d of i.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&g(d)}).observe(document,{childList:!0,subtree:!0});function m(t){const i={};return t.integrity&&(i.integrity=t.integrity),t.referrerPolicy&&(i.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?i.credentials="include":t.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function g(t){if(t.ep)return;t.ep=!0;const i=m(t);fetch(t.href,i)}})();const w="http://localhost:8080",D="ws://localhost:8080/ws";console.log(w);document.addEventListener("DOMContentLoaded",()=>{const r=document.getElementById("video-player"),u=[],m=[],g=document.getElementById("shapes-container"),t=document.getElementById("seg-add"),i=document.getElementById("seg-excl");let d=!0;function E(n,s,e){const o=r.getBoundingClientRect(),c=r.videoWidth/r.offsetWidth,a=r.videoHeight/r.offsetHeight,h=n.clientX-o.left,R=n.clientY-o.top;u.push({x:h*c,y:R*a}),m.push(e);const b=document.createElement("div");b.className=s,b.style.left=`${h}px`,b.style.top=`${R}px`,g.appendChild(b)}let l=null;const L=()=>{l==="positive"?(document.body.style.cursor="crosshair",t.style.color="black",i.style.color="white",d=!1):l==="negative"?(document.body.style.cursor="not-allowed",t.style.color="white",i.style.color="black",d=!1):(document.body.style.cursor="default",t.style.color="white",i.style.color="white",d=!0)};t.addEventListener("click",()=>{l=l==="positive"?null:"positive",L()}),i.addEventListener("click",()=>{l=l==="negative"?null:"negative",L()}),r.addEventListener("click",n=>{d||(n.preventDefault(),l==="positive"?E(n,"circle",1):E(n,"square",0))});const U=document.getElementById("input-img");U.addEventListener("change",n=>{const s=document.getElementById("img-preview"),e=n.target.files[0],o=new FileReader;o.onload=function(){s.src=o.result,s.style.display="block"},e&&o.readAsDataURL(e)});const v=document.getElementById("inference-video-btn"),I=document.getElementById("video-inference-container"),y=document.getElementById("input-video");async function S(n){const s=w+"/presigned-get-url?key="+n;try{const e=await fetch(s,{method:"POST"}),{presignedUrl:o}=await e.json();r.src=o,r.style.display="block"}catch(e){console.error("Error fetching presigned GET URL:",e)}}let f,p=localStorage.getItem("videoKey");if(p){const n=async()=>{await k(p)};y.disabled=!0,n()}async function k(n){return new Promise((s,e)=>{f=new WebSocket(D),f.onopen=()=>{console.log("WebSocket connection established"),f.send(JSON.stringify({videoKey:n})),s()},f.onerror=o=>{console.error("WebSocket error:",o),e(o)},f.onmessage=async o=>{const c=JSON.parse(o.data);console.log("Received message from server:",c),c.status==="completed"&&(P.hidden=!0,localStorage.removeItem("videoKey"),I.hidden=!1,await S(c.videoKey),v.disabled=!1,t.disabled=!1,i.disabled=!1)}})}async function T(n){const s=w+"/presigned-put-url",e=await fetch(s,{method:"POST"}),{presignedUrl:o,key:c}=await e.json();await fetch(o,{method:"PUT",body:n}),p=c,localStorage.setItem("videoKey",p),await k(p)}const P=document.getElementById("video-preview-msg");y.addEventListener("change",async n=>{n.preventDefault();const s=y.files[0];if(y.disabled=!0,I.hidden=!1,s){const e=URL.createObjectURL(s),o=document.createElement("video");o.src=e,o.addEventListener("loadedmetadata",()=>{if(o.duration>10){alert("Video is longer than 10 seconds. Please select a shorter video."),URL.revokeObjectURL(e),y.value="";return}r.src=e,r.style.display="block",P.hidden=!1,T(s)})}});const B=document.getElementById("loading-spinner"),O=document.getElementById("loading-text");v.addEventListener("click",async()=>{const n=U.files[0],s=new FormData;s.append("image",n),s.append("videoKey",p),s.append("segmentationData",JSON.stringify({coordinates:u,labels:m})),B.style.display="block",O.style.display="block",v.hidden=!0;try{const e=await fetch(w+"/inference-video",{method:"POST",body:s,headers:{Accept:"video/mp4"}});if(!e.ok){const h=await e.json();throw new Error(h.error||`HTTP error! status: ${e.status}`)}const o=await e.blob(),c=window.URL.createObjectURL(o),a=document.createElement("a");a.href=c,a.download="processed_video.mp4",document.body.appendChild(a),a.click(),window.URL.revokeObjectURL(c),a.remove()}catch(e){console.error("Error:",e)}finally{B.style.display="none",O.style.display="none",v.hidden=!1}})});
